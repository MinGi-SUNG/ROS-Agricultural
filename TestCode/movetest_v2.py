# UTF-8.


import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import ros_right_sub
import ros_left_sub


PI = 3.14159265359


# def right_callback(dist):
#     # if dist.data == Float32:
#         print(right_data)
#         return dist.data
#
#     #print(msg.data)
#
#
# def left_callback(dist):
#     # if dist.data == Float32:
#         print(left_data)
#
#         return dist.data


def move_base_to(x, y, z, w):
    client = actionlib.SimpleActionClient("move_base", MoveBaseAction)
    while not client.wait_for_server(rospy.Duration(5)):
        rospy.loginfo("Waiting for the move_base action server to come up")

    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"

    goal.target_pose.header.stamp = rospy.Time.now()
    goal.target_pose.pose.position.x = x
    goal.target_pose.pose.position.y = y
    goal.target_pose.pose.orientation.z = z
    goal.target_pose.pose.orientation.w = w

    rospy.loginfo("Sending goal")
    client.send_goal(goal)
    wait = client.wait_for_result()
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available")
    else:
        return client.get_result()


if __name__ == '__main__':

    # point 3,4 (0.972,0.320,-0.015,1.000), (1.700,0.343,0.681,0.732)
    # point 1,4 (0.331,1.756,0.077,0.997), (1.698,0.187,0.669,0.743)

    # goal_positions_x = [0.2901204523206585, 0.963, 1.044, 1.562267100233113, 1.642]
    # goal_positions_y = [1.7223068558941679, 1.745, 0.168, 0.21538396925156483, 1.834]

    # goal_pose_z = [0.08259559621331584, -0.654, -0.070, 0.6439938729142963, 0.753]
    # goal_pose_w = [0.9965831462984747, 0.757, 0.998, 0.7650306475225978, 0.658]

    center_x = [0.3392991476038756, 0.3097560751961481, 0.2985686772100214, 0.27207405922819416, 0.2465783797525702,
                0.9001910050442816, 0.9228648750382785, 0.9676714284011307, 1.0012134875460368, 1.0414035190834385,
                1.0491457654512253, 1.5156476373814933, 1.6144767365019963, 1.6266209114294783, 1.6065405227817624,
                1.565539853518207, 1.5472984715828735, 1.5572065999549918]
    center_y = [0.2596115423732532, 0.6723858884842863, 0.8772249417024484, 1.280877335970951, 1.5141497287942225,
                1.722688480551652, 1.517811736252732, 1.1124147573720116, 0.8880914536287361, 0.48345834259302795,
                0.18200092463088904, 0.2672085470828418, 0.29636418553039323, 0.8550722405832151, 1.0558806658554596,
                1.4617162593233084, 1.6614124562135728, 1.9979267167090695]
    center_z = [0.7191293399464606, 0.7278992358893561, 0.7247925795514931, 0.7358247178981319, 0.735021383915894,
                -0.6655947062425257, -0.6681738095737081, -0.6545859617152052, -0.6571213109779029, -0.6578621844792023,
                0.04643422107265426, 0.09404860809503693, 0.6163380833168112, 0.7459909620870157, 0.7405149991017972,
                0.7424500117079691, 0.7425409503879753, 0.7215936496181795]
    center_w = [0.6948762425268028, 0.6856841126872428, 0.6889671375523599, 0.6771720494306707, 0.6780439257056757,
                0.7463133973217457, 0.7440052151697313, 0.7559875784200293, 0.753784838437788, 0.7531383314054941,
                0.9989213498135756, 0.9955676066020761, 0.7874816614076543, 0.6659560679838339, 0.6720398322311448,
                0.6699014704528096, 0.6698006696002344, 0.69231683847117]

    left_x = [0.18717005238472473, 0.17817096339908528, 0.13971186838219804, 0.12381970588396154, 0.11410366765962762,
              0.9974549142404339, 1.0315441537931234, 1.1055371350303893, 0.9690649324765818, 1.0129141046344656,
              1.0207040653153852, 1.5467542114883042, 1.5467542114883042, 1.4796383216387585, 1.4749933293528983,
              1.451905717044096, 1.4586340284835506]
    left_y = [0.3783506185135652, 0.5827181720748157, 0.9832326710372831, 1.187489525680774, 1.5993535344918908,
              1.8124560388829347, 1.6105775192241898, 1.2139789396968814, 0.6521768426680011, 0.4917284195029879,
              0.39678242281064957, 0.44795248384641234, 0.44795248384641234, 0.8496603264634232, 1.163889952693559,
              1.38038489425303, 1.7048239382995878]
    left_z = [0.7181427220014158, 0.7220889597577537, 0.7496204827759885, 0.7178119097878926, 0.7224914612261707,
              -0.6495053867828813, -0.6386955512224287, -0.6133956250396896, -0.6438952048461138, -0.7608026174761495,
              -0.6136592874815291, 0.7032559057716873, 0.7032559057716873, 0.755955500908788, 0.7259304356069107,
              0.7468338856630852, 0.7379813517383703]
    left_w = [0.6958958476930274, 0.6918002126307603, 0.6618679111444322, 0.6962370732492333, 0.6913798438306347,
              0.7603569901960656, 0.7694595459468144, 0.7897757955155175, 0.7651136942809096, 0.6489833412665071,
              0.7895709460761978, 0.7109367981735393, 0.7109367981735393, 0.6546230065050749, 0.6877681314655113,
              0.6650106369264915, 0.674821105543097]

    right_x = [0.43675255198378293, 0.43048096090478916, 0.4097356417189656, 0.3989583308833774, 0.3902926305900718,
               0.8442750124715429, 0.8448375416064772, 0.8540695084065043, 0.8631040857915266, 0.8665595676318456,
               0.8896010717696341, 1.6903591564071203, 1.6869027695919292, 1.6783209753971644, 1.6665172189777813,
               1.6473695003501407, 1.633819477605433]
    right_y = [0.32315219117278243, 0.5294201290607107, 0.9355953182026872, 1.1403561193647458, 1.342510589129025,
               1.587813674394786, 1.4409193192169711, 1.2397772430284686, 0.8394460166398331, 0.6378973654506749,
               0.23813215483607747, 0.19228001336830422, 0.39321715495776755, 0.7957228866458248, 0.9971316027015759,
               1.3968333251188327, 1.795789810176283]
    right_z = [0.6666672812071783, 0.7229348401382621, 0.7277718678188199, 0.7287028420187275, 0.7286421065639044,
               -0.6914236223757156, -0.708265298675716, -0.6961716861943069, -0.7007974390772651, -0.6959550794683634,
               -0.6850953580160208, 0.6594629968202048, 0.7143708819750043, 0.7282096350755058, 0.7303107235216374,
               0.7220906092340411, 0.7198534184686611]
    right_w = [0.7453554428377303, 0.6909162155531344, 0.6858192971997116, 0.6848300285719292, 0.6848946492287086,
               0.7224495653129316, 0.7059463624750812, 0.7178753257644224, 0.7133603222655062, 0.718085320391793,
               0.728453396192852, 0.7517370257110624, 0.6997672777332864, 0.6853544538289649, 0.6831151053148382,
               0.6917984909321582, 0.6941261095211608]

    if (ros_left_sub.left_dist and ros_right_sub.right_dist > 7.0) or (ros_left_sub.left_dist and ros_right_sub.right_dist <= 7.0):
        goal_positions_x = center_x
        goal_positions_y = center_y
        goal_pose_z = center_z
        goal_pose_w = center_w

    elif ros_left_sub.left_dist < 7.0:
        goal_positions_x = right_x
        goal_positions_y = right_y
        goal_pose_z = right_z
        goal_pose_w = right_w

    elif ros_right_sub.right_dist < 7.0:
        goal_positions_x = left_x
        goal_positions_y = left_y
        goal_pose_z = left_z
        goal_pose_w = left_w

    rospy.init_node("set_navigation_goal")

    for x, y, z, w in zip(goal_positions_x, goal_positions_y, goal_pose_z, goal_pose_w):

        result = move_base_to(x, y, z, w)
        if result:
            continue
        elif not result:
            continue
        else:
            break
        rospy.logininfo("Good job!!!")
