# UTF-8.


import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

PI = 3.14159265359


def move_base_to(x, y, z, w):
    client = actionlib.SimpleActionClient("move_base", MoveBaseAction)
    while not client.wait_for_server(rospy.Duration(5)):
        rospy.loginfo("Waiting for the move_base action server to come up")

    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"

    goal.target_pose.header.stamp = rospy.Time.now()
    goal.target_pose.pose.position.x = x
    goal.target_pose.pose.position.y = y
    goal.target_pose.pose.orientation.z = z
    goal.target_pose.pose.orientation.w = w

    rospy.loginfo("Sending goal")
    client.send_goal(goal)
    wait = client.wait_for_result()
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available")
    else:
        return client.get_result()


if __name__ == '__main__':
    # point 3,4 (0.972,0.320,-0.015,1.000), (1.700,0.343,0.681,0.732)
    # point 1,4 (0.331,1.756,0.077,0.997), (1.698,0.187,0.669,0.743)

    # goal_positions_x = [0.2901204523206585, 0.963, 1.044, 1.562267100233113, 1.642]
    # goal_positions_y = [1.7223068558941679, 1.745, 0.168, 0.21538396925156483, 1.834]

    # goal_pose_z = [0.08259559621331584, -0.654, -0.070, 0.6439938729142963, 0.753]
    # goal_pose_w = [0.9965831462984747, 0.757, 0.998, 0.7650306475225978, 0.658]

    # goal_positions_x = [0.3392991476038756, 0.3097560751961481, 0.2985686772100214, 0.27207405922819416,
    # 0.2465783797525702, 0.9001910050442816, 0.9228648750382785, 0.9676714284011307, 1.0012134875460368,
    # 1.0414035190834385, 1.0491457654512253, 1.5156476373814933, 1.6144767365019963, 1.6266209114294783,
    # 1.6065405227817624, 1.565539853518207, 1.5472984715828735, 1.5572065999549918] goal_positions_y = [
    # 0.2596115423732532, 0.6723858884842863, 0.8772249417024484, 1.280877335970951, 1.5141497287942225,
    # 1.722688480551652, 1.517811736252732, 1.1124147573720116, 0.8880914536287361, 0.48345834259302795,
    # 0.18200092463088904, 0.2672085470828418, 0.29636418553039323, 0.8550722405832151, 1.0558806658554596,
    # 1.4617162593233084, 1.6614124562135728, 1.9979267167090695] goal_pose_z = [0.7191293399464606,
    # 0.7278992358893561, 0.7247925795514931, 0.7358247178981319, 0.735021383915894, -0.6655947062425257,
    # -0.6681738095737081, -0.6545859617152052, -0.6571213109779029, -0.6578621844792023, 0.04643422107265426,
    # 0.09404860809503693, 0.6163380833168112, 0.7459909620870157, 0.7405149991017972, 0.7424500117079691,
    # 0.7425409503879753, 0.7215936496181795] goal_pose_w = [0.6948762425268028, 0.6856841126872428,
    # 0.6889671375523599, 0.6771720494306707, 0.6780439257056757, 0.7463133973217457, 0.7440052151697313,
    # 0.7559875784200293, 0.753784838437788, 0.7531383314054941, 0.9989213498135756, 0.9955676066020761,
    # 0.7874816614076543, 0.6659560679838339, 0.6720398322311448, 0.6699014704528096, 0.6698006696002344,
    # 0.69231683847117]

    goal_positions_x = [0.3458243520930942, 0.33226260798655033, 0.336549087738421, 0.33745779445936674,
                        0.3517102888824872, 0.9428930232051557, 0.9360162491430987, 0.9676714284011307,
                        1.0012134875460368, 1.0414035190834385, 1.0491457654512253, 1.4932274084450738,
                        1.4932274084450738, 1.4851977588557084, 1.5290351522300707, 1.550165613207711,
                        1.5893430161866762]

    goal_positions_y = [0.300026188169096, 0.793989172685527, 1.0433756843422264, 1.2993974382926154,
                        1.4545815715793848, 1.605179606396488, 1.4042942998545676, 1.1124147573720116,
                        0.8880914536287361, 0.48345834259302795, 0.18200092463088904, 0.33622629277772825,
                        0.33622629277772825, 0.5892779632001173, 1.0640185250550112, 1.298339546550991,
                        1.7731646001211447]

    goal_pose_z = [0.7118179508158713, 0.7101006407629823, 0.7054060238993953, 0.6967426618160805,
                   0.6908834855770354, -0.7005033842350507, -0.7281633426560493, -0.6545859617152052,
                   -0.6571213109779029, -0.6578621844792023, 0.04643422107265426, 0.6541658939362884,
                   0.6541658939362884, 0.6784597963972586, 0.675525157506783, 0.6763544292067071,
                   0.6780632515994232]

    goal_pose_w = [0.7023640116750671, 0.7041001917255825, 0.7088034575581905, 0.7173211715859521,
                   0.7229661190933683, 0.7136490795028331, 0.6854036375829712, 0.7559875784200293,
                   0.753784838437788, 0.7531383314054941, 0.9989213498135756, 0.7563510978444711,
                   0.7563510978444711, 0.7346375328504462, 0.7373369389739239, 0.7365763274043428,
                   0.7350035556583502]

    rospy.init_node("set_navigation_goal")

    for x, y, z, w in zip(goal_positions_x, goal_positions_y, goal_pose_z, goal_pose_w):
        result = move_base_to(x, y, z, w)
        if result:
            continue
        elif not result:
            continue
        else:
            break
        rospy.logininfo("Good job!!!")
